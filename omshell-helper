#!/bin/bash

tmpfile="/tmp/omshell-helper-$USER"

# Include the configuration file
. omshell-helper.conf
# Internal variables
option=$1
object=$2
# Only set value if three arguments were provided
if [ $# -eq 3 ]; then
  value=$3
fi

function usage {
if [ $# -eq 1 ]; then
  # echo the error to STDERR
  echo -e "\nERROR: $1\n" >&2
fi

cat <<- EOF
	USAGE
	    $(readlink -f $0) [option] [object] [value]

	option
	     read
	     └── display the state of the indicated object.
	     set
	     └── change the state of the indicated object.

	object
	     control
	     └── The  control object allows you to shut the server down.
	     failover-state
	     └── tracks the state of the failover protocol.

	value is exclusive to the object
	     Values applicable to the control object
	     └── 2 -> Shut the DHCP server down. 
	     Values applicable to the failover-state object
	     ├── 1   -> startup
	     ├── 2   -> normal
	     ├── 3   -> communications interrupted
	     ├── 4   -> partner down
	     ├── 5   -> potential conflict
	     ├── 6   -> recover
	     ├── 7   -> paused
	     ├── 8   -> shutdown
	     ├── 9   -> recover done
	     ├── 10  -> resolution interrupted
	     └── 11  -> conflict done

	EXAMPLES
	     To read the control object:

	          $(readlink -f $0) read control | omshell

	     To set the failover-state to shutdown:

	          $(readlink -f $0) set failover-state 8 | omshell
EOF
exit
}

# Test the option
# - only accept "set" or "read"
regex="^(set|read)$"
if [[ ! $option =~ $regex ]]; then
  usage "bad option. See the option section below."
  exit
fi

# Test the object
# - only accept "control" or "failover-state"
regex="^(control|failover-state)$"
if [[ ! $object =~ $regex ]]; then
  usage "bad object. See the object section below."
  exit
fi

# At least display the object
cat <<- EOF > $tmpfile
	server $SERVER
	port $PORT
	key omapi-key $KEY
	connect
	new $object
	set name = "$NAME"
	open
EOF

# Only proceed if option is set
if [ $option = "set" ]; then

  # Test the value
  # - acceptable values are different depending on the object
  case $object in

    # For the control object
    # - only accept "2"
    control) regex="^2$";;

    # For the failover-state object
    # - only accept numerical values from 1 through 11
    failover-state) regex="(^[1-9]$|^1[01]$)";;

  esac

  # Perform the test using the regex determined above
  if [[ ! $value =~ $regex ]]; then
    usage "bad value"
    exit
  fi

  echo "set $object = $value" >> $tmpfile
  echo "update" >> $tmpfile
fi

cat "$tmpfile"
rm "$tmpfile"
